/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Author: Denys Almaral (https://sketchfab.com/denysalmaral)
License: SKETCHFAB Standard (https://sketchfab.com/licenses)
Source: https://sketchfab.com/3d-models/low-poly-humanoid-robot-bad584b9fbe04c85bc57438842969270
Title: Low Poly Humanoid Robot
*/

import React, { useEffect, useRef } from "react";
import { useGLTF, useAnimations } from "@react-three/drei";
import robotScene from '../assets/3d/low_poly_humanoid_robot.glb';
import { a } from "@react-spring/three";

const Robbot = (props) => {
  // const group = useRef();
  // const { nodes, materials, animations } = useGLTF(
  //   robotScene
  // );
  // const { actions } = useAnimations(animations, a.group);
  // return (
  //   <a.group ref={group} {...props} dispose={null}>
  //     <a.group name="Sketchfab_Scene">
  //       <a.group name="Sketchfab_model" rotation={[-Math.PI / 2, 0, 0]}>
  //         <a.group
  //           name="LowPolyRobotfbx"
  //           rotation={[Math.PI / 2, 0, 0]}
  //           scale={0.01}
  //         >
  //           <a.group name="Object_2">
  //             <a.group name="RootNode">
  //               <a.group name="Object_4">
  //                 <primitive object={nodes._rootJoint} />
  //                 <skinnedMesh
  //                   name="Object_7"
  //                   geometry={nodes.Object_7.geometry}
  //                   material={materials.lpRobot}
  //                   skeleton={nodes.Object_7.skeleton}
  //                 />
  //                 <a.group name="Object_6" rotation={[-Math.PI / 2, 0, 0]} />
  //                 <a.group name="robot_lp" rotation={[-Math.PI / 2, 0, 0]} />
  //               </a.group>
  //             </a.group>
  //           </a.group>
  //         </a.group>
  //       </a.group>
  //     </a.group>
  //   </a.group>
  // );

  const ref = useRef();
  const { scene, animations } = useGLTF(robotScene);
  const { actions } = useAnimations(animations, ref);

  useEffect(() => {
    // to check available animation on model use print animations from useGLTF hook.
    // console.log(actions['walk']);
    document.addEventListener( 'keydown' ,(e) => {
      switch (e.key) {
        case 'ArrowRight':
          actions['walk'].loop();
          break;
      
        default:
          break;
      }
      console.log(e.key);
    });
    document.addEventListener( 'keyup' ,(e) => {
      actions['walk'].pause();
    });
    // actions['walk'].play();
  },)

  return (
    <mesh { ...props } ref={ ref }>
      <primitive object={ scene } />
    </mesh>
  )
}

export default Robbot;